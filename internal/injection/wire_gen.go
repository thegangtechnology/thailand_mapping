// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injection

import (
	"go-template/database"
	"go-template/internal/core/services"
	"go-template/internal/core/vaults"
	"go-template/internal/handlers"
)

// Injectors from wire.go:

func initAuthenticatorService() (services.Authenticator, error) {
	authenticator := vaults.NewAuthenticator()
	servicesAuthenticator := services.NewAuthenticatorService(authenticator)
	return servicesAuthenticator, nil
}

func initUserService() (services.User, error) {
	db := database.Get()
	user := vaults.NewUser(db)
	api := vaults.NewAPI()
	servicesUser := services.NewUser(user, api)
	return servicesUser, nil
}

func initReportService() (services.Report, error) {
	db := database.Get()
	report := vaults.NewReport(db)
	servicesReport := services.NewReport(report)
	return servicesReport, nil
}

func initProductService() (services.Product, error) {
	db := database.Get()
	product := vaults.NewProduct(db)
	servicesProduct := services.NewProduct(product)
	return servicesProduct, nil
}

func provideServerParameter() (*handlers.ServerParameter, error) {
	authenticator, err := initAuthenticatorService()
	if err != nil {
		return nil, err
	}
	user, err := initUserService()
	if err != nil {
		return nil, err
	}
	product, err := initProductService()
	if err != nil {
		return nil, err
	}
	report, err := initReportService()
	if err != nil {
		return nil, err
	}
	serverParameter := &handlers.ServerParameter{
		Authenticator: authenticator,
		User:          user,
		Product:       product,
		Report:        report,
	}
	return serverParameter, nil
}

func Initialize() (handlers.ServerInterface, error) {
	serverParameter, err := provideServerParameter()
	if err != nil {
		return nil, err
	}
	serverInterface := handlers.NewServer(serverParameter)
	return serverInterface, nil
}
