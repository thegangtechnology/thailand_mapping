// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package services_test is a generated GoMock package.
package services_test

import (
	models "go-template/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// AllowAction mocks base method.
func (m *MockUser) AllowAction(permissions *models.Permissions, update models.TransactionAction) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowAction", permissions, update)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowAction indicates an expected call of AllowAction.
func (mr *MockUserMockRecorder) AllowAction(permissions, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowAction", reflect.TypeOf((*MockUser)(nil).AllowAction), permissions, update)
}

// CheckPermissions mocks base method.
func (m *MockUser) CheckPermissions(roles *models.Roles, userInSystem, user *models.User) (models.Permissions, models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermissions", roles, userInSystem, user)
	ret0, _ := ret[0].(models.Permissions)
	ret1, _ := ret[1].(models.Role)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckPermissions indicates an expected call of CheckPermissions.
func (mr *MockUserMockRecorder) CheckPermissions(roles, userInSystem, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermissions", reflect.TypeOf((*MockUser)(nil).CheckPermissions), roles, userInSystem, user)
}

// ExtractUserInformation mocks base method.
func (m *MockUser) ExtractUserInformation(ctx echo.Context) (*string, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractUserInformation", ctx)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExtractUserInformation indicates an expected call of ExtractUserInformation.
func (mr *MockUserMockRecorder) ExtractUserInformation(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractUserInformation", reflect.TypeOf((*MockUser)(nil).ExtractUserInformation), ctx)
}

// GetUser mocks base method.
func (m *MockUser) GetUser(nameStr, emailStr *string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", nameStr, emailStr)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserMockRecorder) GetUser(nameStr, emailStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUser)(nil).GetUser), nameStr, emailStr)
}
