// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package vaults_test is a generated GoMock package.
package vaults_test

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	jwk "github.com/lestrrat-go/jwx/jwk"
	jwt "github.com/lestrrat-go/jwx/jwt"
)

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// GetJWSFromRequest mocks base method.
func (m *MockAuthenticator) GetJWSFromRequest(req *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJWSFromRequest", req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJWSFromRequest indicates an expected call of GetJWSFromRequest.
func (mr *MockAuthenticatorMockRecorder) GetJWSFromRequest(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJWSFromRequest", reflect.TypeOf((*MockAuthenticator)(nil).GetJWSFromRequest), req)
}

// GetKeySet mocks base method.
func (m *MockAuthenticator) GetKeySet() jwk.Set {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeySet")
	ret0, _ := ret[0].(jwk.Set)
	return ret0
}

// GetKeySet indicates an expected call of GetKeySet.
func (mr *MockAuthenticatorMockRecorder) GetKeySet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeySet", reflect.TypeOf((*MockAuthenticator)(nil).GetKeySet))
}

// ParseWithKeySet mocks base method.
func (m *MockAuthenticator) ParseWithKeySet(jws string) (jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseWithKeySet", jws)
	ret0, _ := ret[0].(jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseWithKeySet indicates an expected call of ParseWithKeySet.
func (mr *MockAuthenticatorMockRecorder) ParseWithKeySet(jws interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseWithKeySet", reflect.TypeOf((*MockAuthenticator)(nil).ParseWithKeySet), jws)
}

// ParseWithoutVerify mocks base method.
func (m *MockAuthenticator) ParseWithoutVerify(jws string) (jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseWithoutVerify", jws)
	ret0, _ := ret[0].(jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseWithoutVerify indicates an expected call of ParseWithoutVerify.
func (mr *MockAuthenticatorMockRecorder) ParseWithoutVerify(jws interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseWithoutVerify", reflect.TypeOf((*MockAuthenticator)(nil).ParseWithoutVerify), jws)
}

// ValidateToken mocks base method.
func (m *MockAuthenticator) ValidateToken(token jwt.Token, googleProjectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", token, googleProjectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthenticatorMockRecorder) ValidateToken(token, googleProjectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuthenticator)(nil).ValidateToken), token, googleProjectID)
}
