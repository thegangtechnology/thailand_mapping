// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package vaults_test is a generated GoMock package.
package vaults_test

import (
	vaults "go-template/internal/core/vaults"
	models "go-template/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	jwt "github.com/lestrrat-go/jwx/jwt"
	gorm "gorm.io/gorm"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUser) Create(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUser)(nil).Create), user)
}

// FetchByEmail mocks base method.
func (m *MockUser) FetchByEmail(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByEmail", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchByEmail indicates an expected call of FetchByEmail.
func (mr *MockUserMockRecorder) FetchByEmail(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByEmail", reflect.TypeOf((*MockUser)(nil).FetchByEmail), user)
}

// Save mocks base method.
func (m *MockUser) Save(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockUserMockRecorder) Save(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUser)(nil).Save), user)
}

// Stringify mocks base method.
func (m *MockUser) Stringify(token jwt.Token) (*string, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stringify", token)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Stringify indicates an expected call of Stringify.
func (mr *MockUserMockRecorder) Stringify(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stringify", reflect.TypeOf((*MockUser)(nil).Stringify), token)
}

// WithTrx mocks base method.
func (m *MockUser) WithTrx(trxHandle *gorm.DB) vaults.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTrx", trxHandle)
	ret0, _ := ret[0].(vaults.User)
	return ret0
}

// WithTrx indicates an expected call of WithTrx.
func (mr *MockUserMockRecorder) WithTrx(trxHandle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTrx", reflect.TypeOf((*MockUser)(nil).WithTrx), trxHandle)
}
